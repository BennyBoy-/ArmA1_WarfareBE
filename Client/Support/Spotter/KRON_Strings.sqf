KRON_StrToArray={private["_in","_chars","_arr","_old","_i","_tmp","_chr","_arr"]; _in=_this select 0; _chars=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"," ","0","1","2","3","4","5","6","7","8","9",".",",",":","-","_"]; _arr=[]; _old=""; _i=1; while {true} do {_tmp=[_in, _i] call KRON_StrLeft; _chr=""; {scopeName "CharCheck"; if (_tmp == (_old + _x)) then { _arr=_arr + [_x]; _old=_old + _x; _chr=_x; breakOut "CharCheck"}}forEach _chars; if(_chr == "") exitWith {_arr resize (_i-1); _arr}; _i=_i + 1}};
KRON_StrLeft={private["_in","_len","_buff","_out"]; _in=_this select 0; _len=abs(_this select 1); _buff=""; for "_i" from 0 to (2038 - _len) do {_buff=_buff + " "}; call compile (format["%1_out = ""%2", _buff, _in] + """"); _out};
KRON_StrLen={private["_in","_chk","_buff","_len"]; _in=_this select 0; _chk=""; _len=0; if (_in!="") then {while {_in!=_chk} do {_len=_len+1; _buff=""; for "_i" from 0 to (2038 - _len) do {_buff=_buff + " "}; call compile (format["%1_chk = ""%2", _buff, _in] + """")}}; _len};
KRON_StrRight={private["_in","_len","_arr","_i","_out"]; _in=_this select 0; _len=_this select 1; _arr=[_in] call KRON_StrToArray; _out=""; if (_len>(count _arr)) then {_len=count _arr}; for "_i" from ((count _arr)-_len) to ((count _arr)-1) do {_out=_out + (_arr select _i)}; _out};	
KRON_StrMid={private["_in","_pos","_len","_arr","_i","_out"]; _in=_this select 0; _pos=abs(_this select 1); _len=abs((_this select 2)-1); _arr=[_in] call KRON_StrToArray; _out=""; if ((_pos+_len)>=(count _arr)) then {_len=(count _arr)-_pos-1}; if (_len>0) then {for "_i" from _pos to (_pos+_len) do {_out=_out + (_arr select _i)}}; _out};
KRON_StrInStr={private["_in","_tst","_lenTst","_lenIn","_arr","_tmp","_i","_j","_out", "_continueTests"]; _in=_this select 0; _tst=_this select 1; _out=false; _continueTests=true; if (_in == _tst) then {_out=true; _continueTests=false;}; if (_continueTests) then {_lenIn=[_tst] call KRON_StrLen; _lenTst=[_tst] call KRON_StrLen; if (_lenIn < _lenTst) then {_continueTests=false;}; if (_continueTests) then {_arr=[_in] call KRON_StrToArray; for "_i" from (0) to ((count _arr)-_lenTst) do {_tmp=""; for "_j" from (_i) to (_i+_lenTst-1) do {_tmp=_tmp+ (_arr select _j)}; if (_tmp==_tst) then {_out=true; _i=count _arr}}}}; _out};	
KRON_StrCase={private["_in","_mode","_c1","_c2","_c3","_arr","_tmp","_chr","_i","_f","_out"]; _in=_this select 0; _mode=_this select 1; _c1= ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]; _c2= ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]; if (_mode=="LC") then {_c3=_c1; _c1=_c2; _c2=_c3}; _arr=[_in] call KRON_StrToArray; _out=""; for "_i" from (0) to (count _arr)-1 do {_tmp=""; _chr=_arr select _i; _f=_c1 find _chr; if (_f>-1) then {_tmp=_c2 select _f} else {_tmp=_chr}; _out=_out+_tmp}; _out};
KRON_StrUpper={private["_in","_out"]; _in=_this select 0; _out=[_in,"UC"] call KRON_StrCase; _out};
KRON_StrLower={private["_in","_out"]; _in=_this select 0; _out=[_in,"LC"] call KRON_StrCase; _out};